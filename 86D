#include <bits/stdc++.h>
using namespace std;
#define el '\n'
#define ll long long
#define pb push_back
#define pii pair<int,int>
const int N = 2e5 + 90;
const int M = 1e5 + 90;
const int MOD = 1e9 + 7;
const int MAX = 1e6 + 90;
const long long INF = 2e16;
const int base = 31;
const int Blocksize = 450;
int n,q,a[N];
ll current = 0,ans[N];
unordered_map<int,int> cnt;
struct Query{
    int l,r,id;
} Q[N];
void Input(){
    cin >> n >> q;
    for (int i = 1; i <= n; i++){
        cin >> a[i];
    }
    for (int i = 1; i <= q; i++){
        cin >> Q[i].l >> Q[i].r; Q[i].id = i;
    }
}
void update(ll val, int delta){
    current -= cnt[val]*cnt[val]*val;
    cnt[val] += delta;
    current += cnt[val]*cnt[val]*val;
}
bool cmp(Query a, Query b){
    if (a.l / Blocksize != b.l / Blocksize)
        return a.l < b.l;
    if (a.l/Blocksize % 2 == 1) return a.r < b.r;
    else return a.r > b.r;
}
bool rev(Query a, Query b){
    return a.id < b.id;
}
void solve(){
    sort (Q + 1, Q + 1 + n, cmp);
    int l = 1, r = 0;
    for (int i = 1; i <= q; i++){
        while (Q[i].l > l) update(a[l],-1),l++;
        while (Q[i].l < l) l--,update(a[l],+1);
        while (Q[i].r > r) r++,update(a[r],+1);
        while (Q[i].r < r) update(a[r],-1),r--;
        ans[Q[i].id] = current;
    }
    sort (Q + 1, Q + 1 + n, rev);
    for (int i = 1; i <= q; i++){
        cout << ans[i] << el;
        //cout << "ans["<<i<<"]="<< ans[i]<<'\n';
    }
}
signed main(){
    freopen ("test.inp","r",stdin);
    freopen ("Test.out","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int t; t = 1;
    while (t--){
        Input();
        solve();
    }
    return 0;
}
