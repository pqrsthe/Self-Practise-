#include <bits/stdc++.h>
using namespace std;
#define task "test"
#define ll long long
#define el '\n'
const int N = 1e5 + 9;
const int MAX = 1e5 + 9;
const int LG = 20;
const int MOD = 1e9 + 7;
#define vvi vector<vector<int>>
#define vi vector<int>
#define pii pair<int,int>
const int Blsz = 330;
int n,q,a[N],lazy[Blsz+10];
map<int,int> cnt[Blsz+10];
void update_block(int bl, int br, int x){
    for (int i = bl; i <= br; i++){
        lazy[i] += x;
    }
}

void apply_lazy(int id){
    cnt[id].clear();
    for (int i = id * Blsz; i < (id+1)*Blsz; i++){
        a[i] = a[i] + lazy[id];
        cnt[id][a[i]]++;
    }
    lazy[id] = 0;
}

void manual_update(int l, int r, int x){
    int id = l / Blsz;
    for (int i = l; i <= r; i++){
        cnt[id][a[i]]--;
        if (cnt[id][a[i]] == 0) cnt[id].erase(a[i]);
        a[i] = a[i] + x;
        cnt[id][a[i]]++;
    }
}

void update(int l, int r, int x){
    int bl = l / Blsz; // block chứa l
    int br = r / Blsz; // block chứa r
    // BLock đẩy đủ nằm trong [bl+1;br-1]
    if (bl == br){
        apply_lazy(bl);
        manual_update(l,r,x);
        return;
    }
    update_block(bl+1, br-1, x);
    apply_lazy(bl);
    manual_update(l,(bl+1)*Blsz - 1,x);
    apply_lazy(br);
    manual_update(Blsz*br,r,x);
}

int get(int l, int r, int k){
    int bl = l / Blsz;
    int br = r / Blsz;
    int count = 0;
    if (bl == br){
        apply_lazy(bl);
        for (int i = l; i <= r; i++)
            if (a[i] == k) count++;
        return count;
    }
    apply_lazy(bl);
    apply_lazy(br);
    for (int i = l; i < (bl+1)*Blsz; i++){
        if (a[i] == k) count++;
    }
    for (int i = br*Blsz; i <= r; i++){
        if (a[i] == k) count++;
    }
    for (int i = bl+1; i < br; i++){
        int true_val = cnt[i][k - lazy[i]];
        count += true_val;
    }
    return count;
}

void solve(){
    cin >> n >> q;
    for (int i = 0; i < n; i++){
        cin >> a[i];
        cnt[i/Blsz][a[i]]++;
    }
    while (q--){
        int op,l,r,x;
        cin >> op >> l >> r >> x;
        l--; r--;
        if (op == 1){
            cout << get(l,r,x) << '\n';
        }
        else{
            update(l,r,x);
        }
    }
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);
    if (fopen(task".inp","r")){
        freopen (task".inp","r",stdin);
        freopen (task".out","w",stdout);
    }
    int t; t = 1;
    while (t--) {
        solve();
    }
    return 0;
}
