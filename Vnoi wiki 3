#include <bits/stdc++.h>
using namespace std;
#define el '\n'
#define ll long long
#define pb push_back
const int N = 1e5 + 9;
const int MAX = 1e5 + 9;
const int M = 1e9+9;
const long long INF = 2e16;
const int Blocksize = 330;
int n,q,a[N];
map<ll,ll> cnt[Blocksize+2];
map<ll,ll> lazy;
void Input(){
    cin >> n >> q;
    for (int i = 0; i < n; i++){
        cin >> a[i];
        cnt[i/Blocksize][a[i]]++;
    }
}
void apply_lazy(int id){
    cnt[id].clear();
    for (int i = id*Blocksize; i < (id+1)*Blocksize; i++){
        a[i] += lazy[id];
        cnt[id][a[i]]++;
    }
    lazy[id] = 0;
}
void manual_update(int l, int r, int x){
    int id = l / Blocksize;
    for (int i = l; i <= r; i++){
        cnt[id][a[i]]--;
        if (cnt[id][a[i]] == 0) cnt[id].erase(a[i]);
        a[i] += x;
        cnt[id][a[i]]++;
    }
}
void update(int l, int r, int k){
    int BlockL = l / Blocksize;
    int BlockR = r / Blocksize;
    if (BlockL == BlockR){
        apply_lazy(BlockL);
        manual_update(l,r,k);
        return;
    }
    for (int i = BlockL+1; i < BlockR; i++)
        lazy[i] += k;
    // Cập nhật Lazy phần thừa:
    apply_lazy(BlockL);
    apply_lazy(BlockR);
    // Update manual:
    manual_update(l,(BlockL+1)*Blocksize-1,k);
    manual_update(BlockR*Blocksize,r,k);
}
ll query(int l, int r, int k){
    int count = 0;
    int BlockL = l / Blocksize;
    int BlockR = r / Blocksize;
    if (BlockL == BlockR){
        apply_lazy(BlockL);
        for (int i = l; i <= r; i++)
            if (a[i] == k) count++;
        return count;
    }
    for (int i = BlockL + 1; i < BlockR; i++){
        count += cnt[i][k-lazy[i]];
    }
    apply_lazy(BlockL);
    for (int i = l; i < (BlockL+1)*Blocksize; i++){
        if (a[i] == k) count++;
    }
    apply_lazy(BlockR);
    for (int i = BlockR*Blocksize; i <= r; i++){
        if (a[i] == k) count++;
    }
    return count;
}
void solve(){
    while (q--){
        int op; cin >> op;
        if (op == 2){
            int l,r,x; cin >> l >> r >> x;
            l--; r--;
            update(l,r,x);
        }
        else{
            int l,r,k; cin >> l >> r >> k;
            l--; r--; cout << query(l,r,k) << '\n';
        }
    }
}
signed main(){
    freopen ("test.inp","r",stdin);
    freopen ("test.out","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int t; t = 1;
    while (t--){
        Input();
        solve();
    }
    return 0;
}
