#include <bits/stdc++.h>
using namespace std;
//https://usaco.guide/gold/dp-ranges?lang=cpp#solution---space-jazz
#define int long long
const int nm = 1e6 + 9;
const int N = 1e3 + 9;
const int MOD = 1e9 + 7;
const int LOG = 23;
const int INF = 2e9;
#define el '\n'
#define pii pair<int,int>
int n,a[N],dp[N+1][N+1][2];
void minimize(int &x, int y){
	if (x > y) x = y; 
}

signed main (){
	freopen ("cowrun.in","r",stdin); 
	freopen ("cowrun.out","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n; 
	for (int i = 1; i <= n; i++) 
		for (int j = 1; j <= n; j++)
			for (int k = 0; k <= 1; k++)
				dp[i][j][k] = INF; 
	for (int i = 1; i <= n; i++) cin >> a[i]; 
	sort (a + 1, a + 1 + n); 
	for (int i = 1; i <= n; i++){
		int x = abs(a[i]);
		dp[i][i][0] = n*x;
		dp[i][i][1] = n*x;
	}
	for (int len = 2; len <= n; len++){
		for (int i = 1; i <= n - len + 1; i++){
			int j = i + len - 1; 
			// k = 0: 
			int remains = n - (j - i); 
			int cost = abs(a[j] - a[i]) * remains; 
			minimize(dp[i][j][0], dp[i + 1][j][1] + cost);
			cost = abs(a[i + 1] - a[i]) * remains;  
			minimize(dp[i][j][0], dp[i + 1][j][0] + cost);
			// k = 1:
			cost = abs(a[j-1] - a[j]) * remains; 
			minimize(dp[i][j][1], dp[i][j-1][1] + cost); 
			cost = abs(a[i] - a[j]) * remains; 
			minimize(dp[i][j][1], dp[i][j-1][0] + cost); 
		}
	}
	cout << min(dp[1][n][1],dp[1][n][0]);
	return 0;
}
