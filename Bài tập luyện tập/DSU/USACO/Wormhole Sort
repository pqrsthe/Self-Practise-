#include <bits/stdc++.h>
using namespace std;
//https://usaco.guide/gold/dsu?lang=cpp
const int nm = 1e6 + 9;
const int N = 2e5 + 9;
const int MOD = 1e9 + 7;
const int LOG = 23;
#define el '\n'
#define pii pair<int,int>
int n,m,p[N]; 
int sz[N],par[N];
struct Data{
	int u,v,w; 
};
Data edge[N]; 
bool cmp(Data a, Data b){
	return a.w > b.w; 
}
void make_set(){
	for (int u = 1; u <= n; u++){
		par[u] = u; sz[u] = 1;
	}
}

int find_set(int v){
	if (v == par[v]) return v; 
	else return par[v] = find_set(par[v]);
}

void Union(int u, int v){
	u = find_set(u); v = find_set(v); 
	if (u == v) return; 
	if (sz[u] < sz[v]) swap(u,v); 
	sz[u] += sz[v]; par[v] = u; 
}

signed main (){
	freopen ("wormsort.in","r",stdin); 
	freopen ("wormsort.out","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n >> m; bool need = false; 
	for (int i = 1; i <= n; i++){
		cin >> p[i]; 
		if (i != p[i]) need = true; 
	} 
	for (int i = 1; i <= m; i++){
		int u,v,w; cin >> u >> v >> w; 
		edge[i] = {u,v,w};
	}
	if (!need){
		cout << "-1"; 
		return 0;
	}
	make_set();
	sort (edge + 1, edge + 1 + m, cmp); 
	int index = 1; 
	for (int i = 1; i <= m; i++){
		Union(edge[i].u,edge[i].v); 
		while(index <= n && find_set(index) == find_set(p[index])){
			index++; 
		}
		if (index > n){
			cout << edge[i].w; 
			return 0;
		}
	}
	return 0;
}
