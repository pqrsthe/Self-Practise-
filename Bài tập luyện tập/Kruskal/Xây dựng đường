#include <bits/stdc++.h>
using namespace std;
const int nm = 1e6 + 9;
const int N = 1e4 + 9;
const int MOD = 1e9 + 7;
const int LOG = 23;
#define el '\n'
#define pii pair<int,int>
int par[N],sz[N],m,n,wei; 
struct Dsu{
	void prepare(){
		for (int u = 1; u <= n; u++){
			par[u] = u; sz[u] = 1; 
		}			
	}
	int find_set(int v){
		if (v == par[v]) return v; 
		else return par[v] = find_set(par[v]); 
	}
	bool Union(int a, int b){
		a = find_set(a); b = find_set(b); 
		if (a == b) return false; 
		if (sz[a] < sz[b]) swap(a,b);
		sz[a] += sz[b]; par[b] = a; 
		return true;
	}
} dsu; 
struct Data{
	int u,v,w;
}; 
bool cmp(Data a, Data b){
	return a.w < b.w;
}
vector<Data> edge; 
void MST(){
	dsu.prepare(); 
	sort (edge.begin(), edge.end(), cmp); 
	for (auto e : edge){
		int u = e.u, v = e.v, w = e.w; 
		if (dsu.Union(u,v)){
			wei = max(wei,w); 
		}
	}
}

signed main (){
//	freopen ("Xaydungd.inp","r",stdin); 
//	freopen ("Xaydungd.out","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n >> m; 
	for (int i = 1; i <= m; i++){
		int u,v,w; cin >> u >> v >> w; 
		edge.push_back({u,v,w}); 
	}
	MST(); cout << wei;
	return 0;
}
