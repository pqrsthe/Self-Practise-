#include <bits/stdc++.h>
using namespace std;
//https://oj.vnoi.info/contest/cvahn_ontap_dothi
#define int long long
const int nm = 1e3 + 9;
const int N = 1e3 + 9;
const int MOD = 1e9 + 7;
const int LOG = 23;
const int INF = 1e16;
#define el '\n'
#define pii pair<int,int>
int n,dist[nm],ans=INF,res=INF; 
int pre[nm]; 
vector<pii> g[nm]; 
vector<int> path[nm]; 
void Dijk(int source){
	memset(dist,0x3f,sizeof dist); 
	priority_queue<pii,vector<pii>,greater<pii>> pq; 
	pq.push({0,source}); dist[source] = 0; 
	while (!pq.empty()){
		int u = pq.top().second; pq.pop();
		for (auto e : g[u]){
			int v = e.second, w = e.first; 
			if (dist[v] > dist[u] + w){
				dist[v] = dist[u] + w; 
				pre[v] = u; 
				pq.push({dist[v],v}); 
			}
		}
	}
	int tmp = 0;
	for (int i = 1; i <= n; i++){
		tmp = max(tmp,dist[i]); 
	}
	if (ans > tmp){
		ans = tmp; 
		res = source; 
		for (int i = 1; i <= n; i++) path[i].clear();
		for (int i = 1; i <= n; i++){
			for (int tmp = i; tmp != source; tmp = pre[tmp])
				path[i].push_back(tmp); 
			path[i].push_back(source);
		}
	}
	fill(pre,pre+nm,0); 
}

signed main (){
	freopen ("hld.inp","r",stdin);
	freopen ("hld.out","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n; 
	for (int i = 1; i <= n; i++){
		for (int j = 1; j <= n; j++){
			int x; cin >> x; 
			if (x != 0) g[i].push_back({x,j});  
		}
	}
	for (int i = 1; i <= n; i++) Dijk(i); 
	cout << res << " " << ans << el; 
	for (int i = 1; i <= n; i++){
		if (i == res) continue;
		for (int j = 0; j < path[i].size(); j++) cout << path[i][j] << " "; 
		cout << el; 
	}
	return 0;
}
