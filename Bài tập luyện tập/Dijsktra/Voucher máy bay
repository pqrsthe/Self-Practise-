#include <bits/stdc++.h>
#define int long long
using namespace std;
const int nm = 3e5 + 9;
const int N = 1e3 + 9;
const int MOD = 1e9 + 7;
const int LOG = 23;
const long long INF = 3e14;
#define el '\n'
#define pii pair<int,int>
int n,m,dist[nm][2]; 
vector<pii> g[nm];
void Dijk(int source){
	priority_queue<pii,vector<pii>,greater<pii>> pq; 
	memset(dist, 0x3f, sizeof dist);
	dist[1][0] = 0; pq.push({0,1}); dist[1][1] = 0; 
	while (!pq.empty()){
		int u = pq.top().second; pq.pop();
		for (auto e : g[u]){
			int v = e.second, w = e.first; 
			if (dist[v][0] > dist[u][0] + w){
				dist[v][0] = dist[u][0] + w; 
				pq.push({dist[v][0],v});  
			}
			if (dist[v][1] > dist[u][0] + w/2){
				dist[v][1] = dist[u][0] + w/2; 
				pq.push({dist[v][1],v});  
			}
			if (dist[v][1] > dist[u][1] + w){
				dist[v][1] = dist[u][1] + w; 
				pq.push({dist[v][1],v});
			}
		}
	}
}

signed main (){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n >> m; 
	for (int i = 1; i <= m; i++){
		int u,v,w; cin >> u >> v >> w; 
		g[u].push_back({w,v}); 
	}
	Dijk(1); 
//	for (int i = 1; i <= n; i++) cout << dist[i][0] << " "; cout << el; 
//	for (int i = 1; i <= n; i++) cout << dist[i][1] << " "; cout << el;
	if (dist[n][1] < INF) cout << dist[n][1]; else cout << "-1";
	return 0;
}
