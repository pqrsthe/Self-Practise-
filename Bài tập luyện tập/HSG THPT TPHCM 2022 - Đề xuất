#include <bits/stdc++.h>
using namespace std;
#define int long long
const int nm = 1e5 + 9;
const int N = 1e3 + 9;
const int MOD = 1e9 + 7;
const int INF = 2e12;  
#define el '\n'
#define pii pair<int,int>
int n,m,k,s,t,ans=INF; 
int dist1[nm],dist2[nm]; 
vector<pii> adj[nm],adj_[nm]; 
void dijsktra_from(){
	priority_queue<pii,vector<pii>,greater<pii>> pq; 
	for (int i = 1; i <= n; i++) dist1[i] = INF; 
	pq.push({0,s}); dist1[s] = 0; 
	while (!pq.empty()){
		int u = pq.top().second; pq.pop(); 
		for (auto edge : adj[u]){
			int v = edge.second, w = edge.first; 
			if (dist1[v] > dist1[u] + w){
				dist1[v] = dist1[u] + w; 
				pq.push({dist1[v],v}); 
			}
		}
	}	
}

void dijsktra_to(){
	priority_queue<pii,vector<pii>,greater<pii>> pq; 
	for (int i = 1; i <= n; i++) dist2[i] = INF; 
	pq.push({0,t}); dist2[t] = 0; 
	while (!pq.empty()){
		int u = pq.top().second; pq.pop(); 
		for (auto edge : adj_[u]){
			int v = edge.second, w = edge.first; 
			if (dist2[v] > dist2[u] + w){
				dist2[v] = dist2[u] + w; 
				pq.push({dist2[v],v}); 
			}
		}
	}
}

signed main (){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n >> m >> k >> s >> t; 
	for (int i = 1; i <= m; i++){
		int a,b,l; cin >> a >> b >> l; 
		adj[a].push_back({l,b}); 
		adj_[b].push_back({l,a});
	}
	dijsktra_from(); 
	dijsktra_to();
//	for (int i = 1; i <= n; i++) cout << dist1[i] << " "; cout << el; 
//	for (int i = 1; i <= n; i++) cout << dist2[i] << " "; cout << el; 
	for (int i = 1; i <= n; i++) ans = min(ans, dist1[i] + dist2[i]);  
	while (k--){
		int u,v,q; cin >> u >> v >> q; 
		ans = min(ans, dist1[u] + q + dist2[v]); 
		ans = min(ans, dist1[v] + q + dist2[u]);
	}
	if (ans <= 1e9) cout << ans; else cout << "-1"; 
	return 0;
}
