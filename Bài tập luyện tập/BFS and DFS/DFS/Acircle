#include <bits/stdc++.h>
using namespace std;
const int nm = 5e2 + 100;
const int N = 1e3 + 9;
#define el '\n'
vector <int> adj[nm]; 
vector <int> path; 
bool used[nm]; 
int parent[nm],n,s,st,en; 
bool dfs(int u){
	used[u] = true;
	for (auto v : adj[u]){
		if (!used[v]){
			parent[v] = u; 
			if (dfs(v)) return true; 
		}
		else if (v != parent[u]){
			st = v, en = u; 
			if (st != s) return false; 
			return true; 
		}
	}
	return false; 
}

signed main (){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n >> s; int u,v; 
	while (cin >> u >> v){
		adj[u].push_back(v); 
		adj[v].push_back(u); 
	}
	for (int i = 1; i <= n; i++)
		if (!used[i]){
			if (dfs(i)){
				cout << "YES" << el; 
				path.push_back(st); 
				while (en != st){
					path.push_back(en); 
					en = parent[en]; 
				}
				path.push_back(st); 
				reverse(path.begin(), path.end());
				for (auto i : path) cout << i << " "; cout << el; 
				path.clear(); 
				return 0; 
			}
			fill (used, used + nm - 10, 0);
		}
	cout << "NO"; 
	return 0;
}
