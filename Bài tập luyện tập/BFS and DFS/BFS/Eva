#include <bits/stdc++.h>
using namespace std;
const int nm = 1e5 + 9;
const int N = 1e3 + 9;
#define el '\n'
vector<int> safe;
int n, k, m;
vector<int> adj[nm];
int d[nm];
bool used[nm];
struct XYZ {
    int x, depth;
};

void bfs(int door) {
    queue<XYZ> q;
    d[door] = 0;
    q.push({ door, 0 });
    used[door] = true;
    while (!q.empty()) {
        int u = q.front().x;
        int depth = q.front().depth;
        q.pop();
        for (auto v : adj[u])
            if (!used[v]) {
                d[v] = min(d[v], d[u] + 1);
                //				par[v] = u;
                used[v] = true;
                q.push({ v, depth + 1 });
            }
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n >> k;
    for (int i = 1; i <= k; i++) {
        int x;
        cin >> x;
        safe.push_back(x);
    }
    cin >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    fill(d, d + nm - 5, 1e9);
    for (int i = 0; i < k; i++) {
        bfs(safe[i]);
        fill(used, used + nm - 5, 0);
    }
    for (int i = 1; i <= n; i++) cout << d[i] << " ";
    return 0;
}
