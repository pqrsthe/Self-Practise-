#include <bits/stdc++.h>
using namespace std;

#define el '\n'
#define ll long long
#define st first
#define nd second
#define ii pair<int,int>

const int INTMAX = 2e9;
const int nm = 5e4 + 9;

int n,m; 
vector <ii> adj[nm]; 
int dist[nm], pre[nm];
vector <int> path[nm];

void dijsktra(int source){
	priority_queue<ii, vector<ii>, greater<ii>> pq;
	for (int i = 1; i <= n; i++) dist[i] = INT_MAX; 
	dist[source] = 0;  
	pq.push({0 , source}); 
	while (!pq.empty()){
		int u = pq.top().second; 
		pq.pop(); 
		for (auto edge : adj[u]){
			int v = edge.second; 
			int w = edge.first; 
			if (dist[u] + w < dist[v]){
				dist[v] = dist[u] + w; 
				pq.push({dist[v] , v}); 
				pre[v] = u; 
			}
		}
	}
}

void trace(int source){
	for (int i = 1; i <= n; i++){
		if (i == source) continue; 
		else{
			cout << source << " " << i << " " << dist[i] << " ";
			for (int j = i; j != source; j = pre[j])
				path[i].push_back(j); 
			path[i].push_back(source); 
			reverse (path[i].begin(), path[i].end()); 
			for (auto j : path[i])
				cout << j << " "; 
			cout << el; 
		}
	}
}

signed main (){
//	freopen ("Dijkstra.inp","r",stdin); 
//	freopen ("Dijkstra.out","w",stdout);
	int u; 
	cin >> n >> m >> u; 
	for (int i = 0; i < m; i++){
		int u,v,w; cin >> u >> v >> w; 
		adj[u].push_back({w , v}); 
		adj[v].push_back({w , u}); 
	}
	dijsktra(u); 
	trace(u); 
	return 0;
}
