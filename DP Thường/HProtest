#include <bits/stdc++.h>
using namespace std;
const int nm = 1e6 + 9;
const int N = 1e3 + 9;
const int MOD = 1e9 + 9;
#define el '\n'
#define int long long
int a[nm], pre[nm], h[nm];
int n, ans, st[4 * nm], dp[nm];

void update(int id, int l, int r, int pos, int val) {
    if (pos < l or pos > r)
        return;
    if (l == r) {
        st[id] += val;
        return;
    }
    int mid = l + r >> 1;
    update(id * 2, l, mid, pos, val);
    update(id * 2 + 1, mid + 1, r, pos, val);
    st[id] = st[id * 2] + st[id * 2 + 1];
}

int query(int id, int l, int r, int u, int v) {
    if (r < u or v < l)
        return 0;
    if (u <= l && r <= v)
        return st[id];
    int mid = l + r >> 1;
    int g1 = query(id * 2, l, mid, u, v);
    int g2 = query(id * 2 + 1, mid + 1, r, u, v);
    return g1 + g2;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n;
    int dem = 0;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        pre[i] = pre[i - 1] + a[i];
    }
    vector<int> v;
    for (int i = 0; i <= n; i++) v.push_back(pre[i]);
    sort(v.begin(), v.end());
    for (int i = 0; i <= n; i++) {
        h[i] = lower_bound(v.begin(), v.end(), pre[i]) - v.begin() + 1;
    }
    update(1, 1, n, h[0], 1);
    dp[0] = 1;
    if (a[1] >= 0)
        dp[1] = 1;
    else
        dp[1] = 0;
    for (int i = 1; i <= n; i++) {
        int g = query(1, 1, n, 1, h[i]);
        //		cout << "i = " << i << " va g = " << g << el;
        if (i >= 2)
            dp[i] = g % MOD;
        update(1, 1, n, h[i], dp[i]);
    }
    cout << dp[n] % MOD;
    return 0;
}
