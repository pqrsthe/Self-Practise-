#include <bits/stdc++.h>
using namespace std;
const int nm = 2e5 + 9;
const int N = 1e3 + 9;
#define el '\n'
#define int long long
int n,st[4*nm],a[nm],h[nm],dp[nm]; 

void update(int id, int l, int r, int pos, int val){
	if (pos < l or pos > r) return; 
	else if (l == r){
		st[id] = val; 
		return;
	}
	int mid = l + r >> 1; 
	update(id*2, l, mid, pos, val); 
	update(id*2+1, mid + 1, r, pos, val); 
	st[id] = max(st[id*2], st[id*2+1]); 
}

int query(int id, int l, int r, int u, int v){
	if (v < l or u > r) return 0;
	if (l >= u && r <= v) return st[id]; 
	int mid = l + r >> 1;
	int fi = query(id*2,l,mid,u,v); 
	int se = query(id*2+1,mid+1,r,u,v); 
	return max(fi , se); 
}

signed main (){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n; 
	for (int i = 1; i <= n; i++) cin >> h[i]; 
	for (int i = 1; i <= n; i++) cin >> a[i]; 
	// dp(i) = max(dp(j)) + a(i); j < i; h(i) > h(j)
	for (int i = 1; i <= n; i++){
		dp[i] = a[i] + query(1,1,n,0,h[i]-1); 
		update(1, 1, n, h[i], dp[i]); 
	}
	int ans = -1; 
	for (int i = 1; i <= n; i++) ans = max(ans , dp[i]);
	cout << ans; 
	return 0;
}
