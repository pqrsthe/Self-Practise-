#include <bits/stdc++.h>

using namespace std;
#define el '\n'
#define int long long
#define float double
const int nm = 1e2 + 9;
int n,k;  
float dp[nm][nm];

struct couple{
	int w;
	int c; 
};

bool cmp(couple a, couple b){
	return a.c > b.c; 
}

vector <couple> trace[nm][nm]; 
couple cou[100009]; 

void sub13(){
	for (int i = 1; i <= n; i++) dp[i][0] = 0; 
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= min(i , k); j++){
			int wei = 0, val = 0; 
			for (auto v : trace[i - 1][j - 1]){
				val += v.c;  
				wei += v.w;
			}
			float res = (1.0*(val + cou[i].c)) / (1.0*(wei + cou[i].w));
			if (dp[i - 1][j] < res){
				dp[i][j] = res; 
				for (auto v : trace[i - 1][j - 1]) trace[i][j].push_back(v); 
				trace[i][j].push_back({cou[i].w , cou[i].c}); 
			}
			else{
				dp[i][j] = dp[i - 1][j]; 
				for (auto v : trace[i - 1][j]) trace[i][j].push_back(v); 
			}
		}
	float ans = -1; 
	for (int i = 1; i <= n; i++) ans = max(ans , (dp[i][k]));
	cout << floor(ans);
}

void sub2(){
	int sum = 0;
	sort (cou + 1, cou + 1 + n, cmp); 
	for (int i = 1; i <= k; i++) sum += cou[i].c; 
	float tmp = 1.0 * sum / k; 
	cout << floor(tmp); 	
}

signed main (){
//	freopen ("Daquy.inp","r",stdin);
//	freopen ("Daquy.out","w",stdout);
	int cnt = 0;
	cin >> n >> k; 
	for (int i = 1; i <= n; i++){
		cin >> cou[i].w >> cou[i].c; 
		if (cou[i].w == 1) cnt++; 
	}
	if (cnt == n) sub2();
	else sub13(); 
	return 0;
}
