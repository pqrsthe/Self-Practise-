#include <bits/stdc++.h>
using namespace std;
#define el '\n'
#define ll long long
#define pb push_back
#define pii pair<int,int>
const int N = 1e5 + 90;
const int M = 1e5 + 90;
const int MOD = 1e9 + 7;
const int MAX = 1e5 + 9;
const long long INF = 2e16;
const int base = 31;
const int Blocksize = 330;
int n,q,a[N],ans[N];
int cnt[M],freq[M];
struct Query{
    int l,r,x,id;
}Q[N];
void Input(){
    cin >> n >> q;
    for (int i = 1; i <= n; i++){
        cin >> a[i];
    }
}
bool cmp(Query a, Query b){
    if (a.l/Blocksize != b.l/Blocksize)
        return a.l < b.l;
    if (a.l/Blocksize & 1) return a.r < b.r;
    else return a.r > b.r;
}
bool rev(Query a, Query b){
    return a.id < b.id;
}
void update (int p, int delta, int x){
    cnt[freq[a[p]]]--;
    freq[a[p]] += delta;
    cnt[freq[a[p]]]++;
}
void solve(){
    for (int i = 1; i <= q; i++){
        cin >> Q[i].l >> Q[i].r >> Q[i].x;
        Q[i].id = i;
    }
    sort (Q + 1, Q + 1 + q, cmp);
    int l = 1, r = 0;
    for (int i = 1; i <= q; i++){
        int x = Q[i].x;
        while (Q[i].l > l) update(l++,-1,x);
        while (Q[i].l < l) update(--l,+1,x);
        while (Q[i].r > r) update(++r,+1,x);
        while (Q[i].r < r) update(r--,-1,x);
        ans[Q[i].id] = cnt[x];
        //cout << "[l,r,x,id] = " << Q[i].l << " " << Q[i].r << " " << Q[i].x << " " << Q[i].id << " " << curans << el;
    }
    sort (Q + 1, Q + 1 + q, rev);
    for (int i = 1; i <= q; i++){
        //cout << "ans["<<i<<"]="<<ans[i]<<'\n';
        cout << ans[i] << '\n';
    }
}
signed main(){
    freopen ("test.inp","r",stdin);
    freopen ("test.out","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int t; t = 1;
    while (t--){
        Input();
        solve();
    }
    return 0;
}
