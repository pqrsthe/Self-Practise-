#include <bits/stdc++.h>
using namespace std;
#define task "taptanh"
#define ll long long
#define Node pair<ll, ll>
#define F first
#define S second
#define bit(mask, i) ((mask >> (i)) & (1))
#define MASK(i) (1LL << (i))

const int maxN = 4e4 + 9;
const int MOD = 1e9 + 7;
const int LG = 21;
const long long INF = 2e13;

bool full(vector<vector<int>> &a){
    for (int i = 1; i <= 9; i++)
    for (int j = 1; j <= 9; j++){
        if (a[i][j] == 0) return false;
    }

    return true;
}

bool check(vector<vector<int>> &a, int r, int c, int value){
    for (int i = 1; i <= 9; i++) if (a[i][c] == value) return false;
    for (int j = 1; j <= 9; j++) if (a[r][j] == value) return false;

    int stx = (r % 3 != 0 ? r / 3 * 3 + 1 : r - 2);
    int sty = (c % 3 != 0 ? c / 3 * 3 + 1 : c - 2);
    int enx = (r % 3 == 0 ? r : r / 3 * 3 + 3);
    int eny = (c % 3 == 0 ? c : c / 3 * 3 + 3);

    for (int i = stx; i <= enx; i++)
    for (int j = sty; j <= eny; j++){
        if (a[i][j] == value) return false;
    }

    return true;
}

bool backtrack(vector<vector<int>> &a){
    if (full(a)) return true;

    int r = -1, c = -1;
    bool ok = false;

    for (int i = 1; i <= 9; i++){
        for (int j = 1; j <= 9; j++){
            if (a[i][j] == 0){
                r = i; c = j;
                ok = true;
                break;
            }
        }
        if (ok) break;
    }

    bool okeee = false;
    for (int value = 1; value <= 9; value++){
        if (check(a, r, c, value)){
            a[r][c] = value;
            bool tmp = backtrack(a);
            if (tmp){okeee = true; break;}
            a[r][c] = 0;
        }
    }

    return okeee;
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    if (fopen(task".inp", "r")){
        freopen (task".inp", "r", stdin);
        freopen (task".out", "w", stdout);
    }

    vector<vector<int>> a(9 + 1, vector<int>(9 + 1, 0));
    for (int i = 1; i <= 9; i++)
    for (int j = 1; j <= 9; j++){
        cin >> a[i][j];
    }

    bool res = backtrack(a);

    for (int i = 1; i <= 9; i++){
        for (int j = 1; j <= 9; j++){
            cout << a[i][j] << " ";
        }
        cout << '\n';
    }
    return 0;
}

