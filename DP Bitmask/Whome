#include <bits/stdc++.h>
using namespace std;
const int nm = 1e5 + 9;
const int N = 1e3 + 9;
#define el '\n'
#define int long long
int n,m,p,c,a[nm],s[10],dp[nm][1<<6]; 
const int INF = 1e18;

bool bit(int mask, int i){
	return mask >> i & 1;
}

int cost(int p, int c, int l, int r){
	return p - c*(a[r] - a[l])*(a[r] - a[l]); 
}

signed main (){
	freopen ("WHOME.inp","r",stdin);
	freopen ("WHOME.out","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n >> m >> p >> c; 
	for (int i = 1; i <= n; i++) cin >> a[i]; 
	for (int i = 0; i < m; i++) cin >> s[i]; 
	sort(a + 1, a + 1 + n); 
	for (int mask = 1; mask < 1 << m; mask++) dp[0][mask] = -INF;
	for (int i = 1; i <= n; i++){
		for (int mask = 1; mask < (1 << m); mask++){
			dp[i][mask] = dp[i-1][mask];
			for (int j = 0; j < m; j++){
				if (bit(mask,j) && i >= s[j]){
					int pre_mask = mask - (1 << j); 
					dp[i][mask] = max(dp[i][mask], dp[i - s[j]][pre_mask] + cost(p,c,i - s[j] + 1, i));
					dp[i][mask] = max(dp[i][mask], dp[i - s[j]][mask] + cost(p,c, i - s[j] + 1, i));
				}
			}
		}
	}
	cout << dp[n][(1<<m) - 1];
	return 0;
}
