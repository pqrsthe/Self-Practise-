#include <bits/stdc++.h>
using namespace std;
//https://usaco.guide/gold/dp-bitmasks?lang=cpp
#define int long long
const int nm = 1e5 + 9;
const int N = 8;
const int MOD = 1e9 + 7;
const int LOG = 23;
#define el '\n'
#define pii pair<int,int>
int n,P,k,a[nm],p[nm][N];
int dp[nm][1<<N],ind[nm]; 
bool bit(int mask, int i){
	return mask & (1 << i); 
}

bool cmp(int x, int b){
	return a[x] > a[b]; 
} 

void maximize(int &x, int y){
	if (x < y) x = y; 
}

signed main (){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n >> P >> k; 
	memset(dp,-1,sizeof dp); 
	for (int i = 1; i <= n; i++) cin >> a[i]; 
	for (int i = 1; i <= n; i++){
		for (int j = 0; j < P; j++){
			cin >> p[i][j]; 
		}
	}
	for (int i = 1; i <= n; i++) ind[i] = i; 
	sort(ind+1,ind+1+n,cmp); 
	for (int i = 1; i <= n; i++){
		dp[0][0] = 0;
		int index = ind[i]; 
		for (int mask = 0; mask < (1 << P); mask++){
			int numbit = __builtin_popcount(mask); 
			if ((i-1-numbit) < k && dp[i-1][mask] != -1) maximize(dp[i][mask],dp[i-1][mask] + a[index]); 
			for (int j = 0; j < P; j++){
				if (bit(mask,j)){
					int pre_mask = mask ^ (1 << j); 
					if (dp[i-1][pre_mask] != -1) maximize(dp[i][mask], dp[i - 1][pre_mask] + p[index][j]); 	
				}
			}
			if (dp[i-1][mask] != -1) maximize(dp[i][mask],dp[i-1][mask]); 
//			cout << "[i,mask,dp[i][mask]] = " << i << " " << mask << " " << dp[i][mask] << el; 
		}
	}
	cout << dp[n][(1<<P)-1]; 
	return 0;
}
