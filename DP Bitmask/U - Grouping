#include <bits/stdc++.h>
using namespace std;
const int nm = 1e6 + 9;
const int N = 16; 
#define el '\n'
int n,a[N][N]; 
#define ll long long
ll cost[1 << N],dp[1 << N]; 

bool bit(int mask, int k){
	return mask & (1 << k); 
}

signed main (){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	cin >> n; 
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> a[i][j]; 
	for (int mask = 0; mask < (1 << n); mask++){
		for (int j = 0; j < n; j++)
			if (bit(mask,j)){
				for (int i = j + 1; i < n; i++)
					if (bit(mask,i)){
						cost[mask] += a[j][i]; 
					}
			}
	}
	for (int mask = 0; mask < (1 << n); mask++){
		dp[mask] = max(dp[mask], cost[mask]); 
		for(int s = mask; s; s = (s - 1) & mask)
			dp[mask] = max(dp[mask], dp[s] + cost[mask ^ s]); 
//		cout << mask << " " <<dp[mask] << el;
	}
	cout << dp[(1 << n) - 1]; 
	return 0;
}
